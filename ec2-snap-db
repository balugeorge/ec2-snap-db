#!/bin/bash
#set -x

DIR=$(dirname $(readlink -f "$0"))
SUDO=$([ $EUID -ne 0 ] && echo sudo)

die() { echo "$@" 1>&2; exit 1; }

check_aws_key() {
  local FOUND_KEY= FOUND_VALUE=
  for KEY in "$@"; do
    if [ -z $FOUND_KEY ]; then
      if [ -n "${!KEY}" ]; then
        FOUND_KEY=$KEY
        FOUND_VALUE="${!KEY}"
      fi
    fi
    if [ -n "${!KEY}" -a "${!KEY}" != "$FOUND_VALUE" ]; then
      die "Both $FOUND_KEY and $KEY are set, but they have different values"
    fi
  done
  if [ -n "$FOUND_KEY" ]; then
    for KEY in "$@"; do
      if [ -z "${!KEY}" ]; then
        declare -g -x "$KEY=$FOUND_VALUE"
      fi
    done
  else
    die "Missing key: $@"
  fi
}

check_aws_key AWS_ACCESS_KEY_ID AWS_ACCESS_KEY
check_aws_key AWS_SECRET_ACCESS_KEY AWS_SECRET_KEY

if [ $# -eq 0 ]; then
  die "Usage: $0 MOUNT [MOUNT...]"
fi

. $DIR/ec2-instance-env --export

VOLUME_MAP=$($DIR/ec2-volumes-for-mount "$@")
if [ $? -ne 0 ]; then
  echo "Could not determine volumes for mounts: $@" 1>&2
  exit 1
fi

EC2_INSTANCE_NAME=$(ec2-describe-tags --region $EC2_REGION --filter "resource-id=$EC2_INSTANCE_ID" | cut -f5-)
TS=$(date "+%Y%m%d%H%M%S")

ARGS="--noaction"
ARGS+=" --region $EC2_REGION"
ARGS+=$(awk -F: '{ print " --freeze " $1 }' <<< "$VOLUME_MAP" | uniq)
ARGS+=$(awk -v "NAME=${EC2_INSTANCE_NAME:-$EC2_INSTANCE_ID}" \
            -v "TS=$TS" -F: \
            '{ MOUNT = $1 == "/" ? "/[root]" : $1; print " --description \"" NAME MOUNT "/" TS "\" " $2 }' \
            <<< "$VOLUME_MAP")
echo $SUDO ec2-consistent-snapshot $ARGS
